Linked List:
A Linked List is a linear data structure where elements (called nodes) are stored in memory in a non-contiguous manner.


Each node consists of two parts:
Data: Stores the actual value.
Pointer (Next): Stores the reference to the next node in the sequence


Types of Linked Lists:
Singly Linked List: Each node points to the next node.
Doubly Linked List: Each node points to both the next and previous nodes.
Circular Linked List: The last node points back to the first node, forming a circle.


Advantages of Linked Lists:
✅ Dynamic Size – Unlike arrays, linked lists don’t require a fixed size at initialization.
✅ Efficient Insertions/Deletions – No need to shift elements like in an array.
✅ Better Memory Utilization – Nodes can be scattered in memory.


Disadvantages:
❌ Extra Memory – Each node requires additional storage for the pointer.
❌ Slower Access – Elements cannot be accessed directly (like an array’s index); traversal is needed.

<------------------------------------------------------------------------------------------------------------------------>

Doubly Linked List:
A Doubly Linked List (DLL) is a type of linked list in which each node has three components:
Data – Stores the actual value.
Pointer to the next node (next) – Links to the next node in the sequence.
Pointer to the previous node (prev) – Links to the previous node in the sequence.

Advantages:
-> Bi-directional traversal: You can move forward and backward through the list.
-> Efficient insertion and deletion: Unlike a singly linked list, deletion is faster because you have a reference to the previous node.
-> Better for complex data structures: Used in navigation systems, undo/redo operations, and LRU caching.

Disadvantages:
Extra memory usage: Each node requires an additional pointer.
Slightly complex operations: More pointers need to be updated when modifying the list.

<------------------------------------------------------------------------------------------------------------------------------->

Circular Linked List:
A Circular Linked List is a variation of a linked list where the last node points back to the first node instead of NULL,
forming a circular structure.

Advantages of Circular Linked List
✅ Efficient Traversal – No need for NULL checks; it loops infinitely until stopped.
✅ Better Queue Implementation – Useful for round-robin scheduling (CPU scheduling, task management).
✅ Easier Back-to-Front Access – Can cycle through elements seamlessly.

